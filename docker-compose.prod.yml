services:
  postgres:
    image: "postgres:14.7-alpine"
    restart: always
    container_name: "postgres"
    env_file: ./.env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: always
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:4-management-alpine
    restart: always
    container_name: rabbitmq
    env_file: ./.env.prod
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3

  redis:
    image: redis/redis-stack
    restart: always
    container_name: redis
    env_file: ./.env.prod
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    command: --redis.addr redis:6379
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: scheduler
    env_file: ./.env.prod
    environment:
      - PORT=${TASK_PORT}
    ports:
      - ${TASK_PORT}:${TASK_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${TASK_PORT}/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  sse:
    build:
      context: ../server-sent-events
      dockerfile: Dockerfile
    restart: always
    container_name: sse
    env_file: ./.env.prod
    environment:
      - PORT=${SSE_PORT}
    ports:
      - ${SSE_PORT}:${SSE_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SSE_PORT}/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  email-worker:
    build:
      context: ../email-serverless
      dockerfile: Dockerfile.node
    restart: always
    container_name: email-worker
    env_file: ./.env.prod
    environment:
      - PORT=${EMAIL_PORT}
    ports:
      - ${EMAIL_PORT}:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${EMAIL_PORT}/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    restart: always
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      scheduler:
        condition: service_healthy
      sse:
        condition: service_healthy
      email-worker:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    restart: always
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/templates/default.conf.template
    environment:
      - TASK_PORT=${TASK_PORT}
      - SSE_PORT=${SSE_PORT}
      - EMAIL_PORT=${EMAIL_PORT}
    depends_on:
      scheduler:
        condition: service_healthy
      sse:
        condition: service_healthy
      email-worker:
        condition: service_healthy

  ngrok:
    image: ngrok/ngrok:latest
    restart: always
    container_name: ngrok
    command:
      - "http"
      - "--url=${NGROK_URL}"
      - "http://nginx:80"
    env_file: ./.env.prod
    ports:
      - 4040:4040

  prometheus:
    image: prom/prometheus
    restart: always
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    env_file: ./.env.prod
    depends_on:
      - cadvisor

  alloy:
    image: grafana/alloy:latest
    restart: always
    container_name: alloy
    ports:
      - "12345:12345"
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy

  loki:
    image: grafana/loki:latest
    restart: always
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml:ro
      - loki_data:/loki:rw
    command: -config.file=/etc/loki/config.yaml

  jaeger:
    image: cr.jaegertracing.io/jaegertracing/jaeger:latest
    restart: always
    container_name: jaeger
    ports:
      - "16686:16686"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  grafana:
    image: grafana/grafana
    restart: always
    container_name: grafana
    ports:
      - "${GF_PORT:-3000}:3000"
    env_file: ./.env.prod
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki

  backup:
    image: offen/docker-volume-backup:latest
    container_name: "volumes-backup"
    restart: always
    volumes:
      - rabbitmq_data:/backup/rabbitmq:ro
      - postgres_data:/backup/postgres:ro
      - redis_data:/backup/redis:ro
      - prometheus_data:/backup/prometheus:ro
      - grafana_data:/backup/grafana:ro
      - loki_data:/backup/loki:ro

      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/synology/docker/backups:/archive
      - /etc/localtime:/etc/localtime:ro
    environment:
      BACKUP_CRON_EXPRESSION: "@daily"
      BACKUP_FILENAME: "backup-%Y-%m-%dT%H-%M-%S.{{ .Extension }}"
      BACKUP_RETENTION_DAYS: 7

volumes:
  rabbitmq_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  default:
    name: scheduler
    driver: bridge
